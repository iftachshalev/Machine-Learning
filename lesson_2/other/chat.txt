17:25:28	 From  יקיר בשארי : import numpy as npfrom PIL import Imageimport matplotlib.pyplot as pltclass Perceptron(object):    def __init__(self, numOfInputs, epochs=200, learningRate=0.01):        self.epochs = epochs        self.learningRate = learningRate        self.weights = np.zeros(numOfInputs)        self.bios = 1    def Activation(self, s):        if s > 0:            activation = 1        else:            activation = 0        return activation    def predict(self, inputs):        sum = np.dot(inputs, self.weights) + self.bios        out = self.Activation(sum)        return out    def train(self, inputs, labels):        for _ in range(self.epochs):            for i in range(len(inputs)):                prd = self.predict(inputs[i])                self.weights -= (prd - labels[i]) * inputs[i] * self.learningRate                self.bios -= (prd - labels[i]) * self.learningRateseaList=[]landList=[]def getData():    for i in range(10):        img_sea = Image.open("data/sea"+str(i)+".jpg")      
17:39:17	 From  Yossi Ben-Shoshan   to   גדי הרמן(Privately) : v
17:39:21	 From  Yossi Ben-Shoshan   to   גדי הרמן(Privately) : פה
17:55:17	 From  גדי הרמן : data = np.stack((x, y), axis=-1)
18:37:26	 From  כמאל דהאמשה : # ------------------------ Functions ------------------------def SeaPic():    sea_color = []    for i in range(10):        img = Image.open("data/sea" + str(i) + ".jpg")        img.load()        data = np.array(img, dtype=np.uint8)        t = []        for i in range(3):            t.append(data[:, :, i].sum() / data[:, :, i].size)        sea_color.append(t)    return sea_colordef LandPic():    land_color = []    for i in range(10):        img = Image.open("data/land" + str(i) + ".jpg")        img.load()        data = np.array(img, dtype=np.uint8)        t = []        for i in range(3):            t.append(data[:, :, i].sum() / data[:, :, i].size)        land_color.append(t)    return land_colorsea = SeaPic()lnd = LandPic()data_color = np.vstack((sea, lnd))print (data_color)print (data_color.shape)pic_lbl = np.array([0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1])perceptron = Perceptron(3)perceptron.train(data_color, pic_lbl)test = []for i in range(6):    img = Image.open("test
18:39:03	 From  Noam Elyashar : חדר 4 
18:39:05	 From  Noam Elyashar : # Write your code here :-)import numpy as npfrom PIL import Image#import PIL as Imagefrom matplotlib import pyplot as pltclass Perceptron(object):    def __init__(self, numOfInputs, epochs=200, learningRate=0.01):        self.epochs = epochs        self.learningRate = learningRate        self.weights = np.zeros(numOfInputs)        self.bios = 1    def Activation(self, s):        if s > 0:            activation = 1        else:            activation = 0        return activation    def predict(self, inputs):        sum = np.dot(inputs, self.weights) + self.bios        out = self.Activation(sum)        return out    def train(self, inputs, labels):        for _ in range(self.epochs):            for i in range(len(inputs)):                prd = self.predict(inputs[i])                self.weights -= (prd - labels[i]) * inputs[i] * self.learningRate                self.bios -= (prd - labels[i]) * self.learningRatelbl=[]sea_colors=[]for i in range(11):    img=Image.open("data/SEA"+
18:40:20	 From  irene kipnis : בבקשה תשלחו את הקוד כקובץ py
18:41:04	 From  irene kipnis : תודה!
18:55:44	 From  azhar dakwar : בבקשה שתפו את הפתרון שלכם
18:58:37	 From  irene kipnis : זה מה ששהם הציגה עכשיו, רק עם 10 תמונות של test...
19:58:34	 From  היתם אבו יוסף : תודה שבוע טוב
